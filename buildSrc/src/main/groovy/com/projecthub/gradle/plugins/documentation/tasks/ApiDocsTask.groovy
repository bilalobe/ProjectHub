package com.projecthub.gradle.plugins.documentation.tasks

import org.gradle.api.DefaultTask
import org.gradle.api.file.FileCollection
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.javadoc.Javadoc
import org.gradle.external.javadoc.StandardJavadocDocletOptions

class ApiDocsTask extends DefaultTask {
    @Input
    String title = project.name
    
    @Input
    String footer = "Generated by ProjectHub Documentation Plugin"
    
    @InputFiles
    FileCollection sourceDirs
    
    @OutputDirectory
    File outputDir = new File(project.buildDir, "docs/api")
    
    private String javadocTaskName
    
    ApiDocsTask() {
        description = "Generates API documentation using Javadoc"
        group = "Documentation"
        
        // Initialize the task name that we'll depend on
        javadocTaskName = "_${name}_javadoc"
        
        // Configure dependencies in doFirst to ensure task graph is ready
        doFirst {
            configureJavadocTask()
        }
    }

    @TaskAction
    void generateApiDocs() {
        project.logger.lifecycle("Generating API documentation for ${project.name}")
    }
    
    private void configureJavadocTask() {
        if (!project.tasks.findByName(javadocTaskName)) {
            project.tasks.create(javadocTaskName, Javadoc) { javadoc ->
                javadoc.source = sourceDirs
                javadoc.destinationDir = outputDir
                javadoc.classpath = project.files(project.configurations.compileClasspath)
                
                // Configure options properly for current Gradle version
                javadoc.options {
                    if (it instanceof StandardJavadocDocletOptions) {
                        it.docTitle = title
                        it.windowTitle = title
                        it.bottom = footer
                        it.addStringOption('Xdoclint:none', '-quiet')
                        it.memberLevel = 'PROTECTED'
                        it.linkSource = true
                        it.use = true
                        it.version = true
                        it.author = true
                    }
                }
                
                // Use the Java toolchain if available
                if (project.hasProperty('javaToolchains')) {
                    javadoc.javadocTool = project.javaToolchains.javadocToolFor {
                        languageVersion = project.provider { 
                            project.java.toolchain.languageVersion 
                        }
                    }
                }
            }
            
            // Make this task depend on the javadoc task
            dependsOn(javadocTaskName)
        }
    }
}