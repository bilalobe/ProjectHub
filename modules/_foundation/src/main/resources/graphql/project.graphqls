type Project {
    id: ID!
    name: String!
    description: String
    status: ProjectStatus!
    teamId: ID!
    startDate: Date
    deadline: Date
    endDate: Date
    components: [Component]
    tasks: [Task]
    completionPercentage: Float!
}

type ProjectStatistics {
    totalProjects: Int!
    activeProjects: Int!
    completedProjects: Int!
    overdueProjects: Int!
    completionRate: Float!
    averageDuration: Float!
    delayedProjects: Int!
    riskMetrics: ProjectRiskMetrics!
}

type ProjectRiskMetrics {
    highRiskPercentage: Float!
    projectHealthIndex: Float!
}

type ProjectConnection {
    edges: [ProjectEdge!]!
    pageInfo: PageInfo!
}

type ProjectEdge {
    node: Project!
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

enum ProjectStatus {
    CREATED
    ACTIVE
    ON_HOLD
    COMPLETED
    CANCELLED
    OVERDUE
    ARCHIVED
    REOPENED
}

input ProjectInput {
    name: String!
    description: String
    teamId: ID!
    startDate: Date
    deadline: Date
}

input ProjectSearchInput {
    name: String
    status: ProjectStatus
    teamId: ID
    startDateFrom: Date
    startDateTo: Date
    deadlineFrom: Date
    deadlineTo: Date
    sortField: String
    ascending: Boolean = true
}

type Query {
    project(id: ID!): Project
    projects: [Project!]!
    projectConnection(first: Int!, after: String): ProjectConnection!
    searchProjects(input: ProjectSearchInput!): [Project!]!
    projectStatistics(teamId: ID): ProjectStatistics!
}

type Mutation {
    createProject(input: ProjectInput!): Project!
    updateProject(id: ID!, input: ProjectInput!): Project!
    updateProjectStatus(id: ID!, status: ProjectStatus!): Boolean!
    deleteProject(id: ID!): Boolean!
}