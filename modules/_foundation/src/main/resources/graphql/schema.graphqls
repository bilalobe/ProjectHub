type Query {
    cohort(id: ID!): Cohort
    cohorts(page: Int = 0, size: Int = 10): CohortConnection!
    cohortsBySchool(schoolId: ID!): [Cohort!]!
}

type Mutation {
    createCohort(input: CreateCohortInput!): Cohort!
    updateCohort(id: ID!, input: UpdateCohortInput!): Cohort!
    archiveCohort(id: ID!, reason: String!): Cohort!
    completeCohort(id: ID!): Cohort!
    addTeamToCohort(cohortId: ID!, teamId: ID!): Cohort!
}

type Cohort {
    id: ID!
    name: String!
    startTerm: Date!
    endTerm: Date!
    isArchived: Boolean!
    isActive: Boolean!
    school: School!
    teams: [Team!]!
    assignment: CohortAssignment!
}

type CohortConnection {
    edges: [CohortEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type CohortEdge {
    node: Cohort!
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type School {
    id: ID!
    name: String!
}

type Team {
    id: ID!
    name: String!
}

type CohortAssignment {
    year: SchoolYear!
    level: GradeLevel!
    maxStudents: Int!
    maxTeams: Int!
}

input CreateCohortInput {
    name: String!
    startTerm: Date!
    endTerm: Date!
    schoolId: ID!
    year: SchoolYearInput!
    level: GradeLevel!
    maxStudents: Int!
}

input UpdateCohortInput {
    name: String
    startTerm: Date
    endTerm: Date
    maxStudents: Int
}

input SchoolYearInput {
    startYear: Int!
    endYear: Int!
}

enum GradeLevel {
    FRESHMAN
    SOPHOMORE
    JUNIOR
    SENIOR
}

scalar Date
