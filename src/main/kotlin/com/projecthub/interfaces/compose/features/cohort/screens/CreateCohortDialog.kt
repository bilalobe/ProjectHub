package com.projecthub.ui.cohort.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.projecthub.ui.cohort.model.*
import java.time.LocalDate

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CreateCohortDialog(
    onDismiss: () -> Unit,
    onCreateCohort: (Cohort) -> Unit
) {
    var cohortName by remember { mutableStateOf("") }
    var termType by remember { mutableStateOf(TermType.FALL) }
    var termYear by remember { mutableStateOf(LocalDate.now().year) }
    var startDate by remember { mutableStateOf(LocalDate.now()) }
    var endDate by remember { mutableStateOf(LocalDate.now().plusMonths(4)) }

    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text("Create New Cohort") },
        text = {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                OutlinedTextField(
                    value = cohortName,
                    onValueChange = { cohortName = it },
                    label = { Text("Cohort Name") },
                    modifier = Modifier.fillMaxWidth()
                )

                ExposedDropdownMenuBox(
                    expanded = false,
                    onExpandedChange = {},
                ) {
                    OutlinedTextField(
                        value = termType.name,
                        onValueChange = {},
                        readOnly = true,
                        label = { Text("Term Type") },
                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = false) },
                        modifier = Modifier.fillMaxWidth()
                    )

                    DropdownMenu(
                        expanded = false,
                        onDismissRequest = {}
                    ) {
                        TermType.values().forEach { type ->
                            DropdownMenuItem(
                                text = { Text(type.name) },
                                onClick = { termType = type }
                            )
                        }
                    }
                }

                OutlinedTextField(
                    value = termYear.toString(),
                    onValueChange = { value ->
                        value.toIntOrNull()?.let { termYear = it }
                    },
                    label = { Text("Year") },
                    modifier = Modifier.fillMaxWidth()
                )

                // In a real implementation, we would use proper date pickers here
                OutlinedTextField(
                    value = startDate.toString(),
                    onValueChange = {},
                    label = { Text("Start Date") },
                    modifier = Modifier.fillMaxWidth(),
                    readOnly = true
                )

                OutlinedTextField(
                    value = endDate.toString(),
                    onValueChange = {},
                    label = { Text("End Date") },
                    modifier = Modifier.fillMaxWidth(),
                    readOnly = true
                )
            }
        },
        confirmButton = {
            Button(
                onClick = {
                    val newCohort = Cohort(
                        id = "", // Will be generated by the backend
                        name = cohortName,
                        term = Term(
                            id = "", // Will be generated by the backend
                            name = "${termType.name} $termYear",
                            year = termYear,
                            type = termType
                        ),
                        startDate = startDate,
                        endDate = endDate,
                        status = CohortStatus.PLANNED
                    )
                    onCreateCohort(newCohort)
                },
                enabled = cohortName.isNotBlank()
            ) {
                Text("Create")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("Cancel")
            }
        }
    )
}